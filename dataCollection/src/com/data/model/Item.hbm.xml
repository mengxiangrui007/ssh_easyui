<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- 
    Mapping file autogenerated by MyEclipse Persistence Tools
-->
<hibernate-mapping>
<!-- hibernate提供了saveOrUpdate的方法来进行数据库的操作。hibernate会根据对象的状态决定是insert还是update，
其根本是通过xml文件中unsaved-value来确定的。如果设置null，系统会根据传入的对象的id的值判断，如果是null，
则表示对象不存在，那么insert;如果不是Null，则表示已经存在，那么update.如果设置为none，那么表示对象不存在，
会始终调用insert;如果设置为any，那么表示对象始终存在，会始终调用update -->
    <class name="com.data.model.Item" table="item" catalog="data5">
        <id name="id" type="java.lang.Integer" unsaved-value="null">
            <column name="ID" />
            <generator class="assigned" />
        </id>
        <many-to-one name="users" class="com.data.model.Users" fetch="select">
            <column name="USER_ID" />
        </many-to-one>
        <many-to-one name="department" class="com.data.model.Department"  fetch="select">
            <column name="DEPARTMENT_ID" />
        </many-to-one>
        <property name="name" type="java.lang.String">
            <column name="NAME" length="32" />
        </property>
        <property name="createTime" type="java.sql.Timestamp">
            <column name="CREATE_TIME" length="19" />
        </property>
        <property name="description" type="java.lang.String">
            <column name="DESCRIPTION" />
        </property>
        <property name="itemTitle" type="java.lang.String">
            <column name="ITEM_TITLE" length="32" />
        </property>
        <property name="itemType" type="java.lang.Short">
            <column name="ITEM_TYPE" />
        </property>
        <property name="itemQuestion" type="java.lang.String">
            <column name="ITEM_QUESTION" />
        </property>
          <property name="isHaveQuestion" type="java.lang.Short">
            <column name="ISHAVA_QUESTION"  />
        </property>
        <set name="questions" inverse="true" lazy="false"  cascade="delete" >
            <key >
                <column name="ITEM_ID" />
            </key>
            <one-to-many class="com.data.model.Question" />
        </set>
    </class>
</hibernate-mapping>
